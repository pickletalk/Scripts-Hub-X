local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local States = {
    PlayerPlot = nil,
    InstantTeleportEnabled = false,
    FastInteractionEnabled = false,
    DesyncEnabled = false,
    AutoLockEnabled = false,
    NoclipEnabled = false,
    AntiRagdollEnabled = false,
    GodModeEnabled = false,
    AntiVoidEnabled = false,
    InfiniteJumpEnabled = false,
    PlayerESPEnabled = false,
    BaseESPEnabled = false,
    TimerESPEnabled = false,
    CurrentTheme = "Anime Dark",
    WalkSpeed = 16,
    OriginalJumpPower = 50,
    AntiVoidPlatform = nil,
    DesyncUI = nil,
    ESPObjects = {},
    Connections = {},
}

WindUI:AddTheme({Name = "Anime Dark", Accent = Color3.fromHex("#FF0F7B"), Dialog = Color3.fromHex("#161616"), Outline = Color3.fromHex("#FF0F7B"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#101010"), Button = Color3.fromHex("#52525b"), Icon = Color3.fromHex("#FF0F7B")})
WindUI:AddTheme({Name = "Anime Light", Accent = Color3.fromHex("#F89B29"), Dialog = Color3.fromHex("#f5f5f5"), Outline = Color3.fromHex("#F89B29"), Text = Color3.fromHex("#000000"), Placeholder = Color3.fromHex("#5a5a5a"), Background = Color3.fromHex("#ffffff"), Button = Color3.fromHex("#e5e5e5"), Icon = Color3.fromHex("#F89B29")})
WindUI:AddTheme({Name = "Purple Dream", Accent = Color3.fromHex("#9333EA"), Dialog = Color3.fromHex("#1a1625"), Outline = Color3.fromHex("#A855F7"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#0f0b16"), Button = Color3.fromHex("#4c2a6e"), Icon = Color3.fromHex("#C084FC")})
WindUI:AddTheme({Name = "Ocean Blue", Accent = Color3.fromHex("#0EA5E9"), Dialog = Color3.fromHex("#161e28"), Outline = Color3.fromHex("#38BDF8"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#0a1420"), Button = Color3.fromHex("#1e3a5f"), Icon = Color3.fromHex("#7DD3FC")})
WindUI:AddTheme({Name = "Forest Green", Accent = Color3.fromHex("#10B981"), Dialog = Color3.fromHex("#16211c"), Outline = Color3.fromHex("#34D399"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#0a1610"), Button = Color3.fromHex("#1e4d3a"), Icon = Color3.fromHex("#6EE7B7")})
WindUI:AddTheme({Name = "Crimson Red", Accent = Color3.fromHex("#DC2626"), Dialog = Color3.fromHex("#211616"), Outline = Color3.fromHex("#EF4444"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#180a0a"), Button = Color3.fromHex("#5f1e1e"), Icon = Color3.fromHex("#F87171")})
WindUI:AddTheme({Name = "Sunset Orange", Accent = Color3.fromHex("#F97316"), Dialog = Color3.fromHex("#211a16"), Outline = Color3.fromHex("#FB923C"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#18120a"), Button = Color3.fromHex("#5f371e"), Icon = Color3.fromHex("#FDBA74")})
WindUI:AddTheme({Name = "Midnight Purple", Accent = Color3.fromHex("#7C3AED"), Dialog = Color3.fromHex("#1a1625"), Outline = Color3.fromHex("#8B5CF6"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#0f0a18"), Button = Color3.fromHex("#3d2a5f"), Icon = Color3.fromHex("#A78BFA")})
WindUI:AddTheme({Name = "Cyan Glow", Accent = Color3.fromHex("#06B6D4"), Dialog = Color3.fromHex("#162228"), Outline = Color3.fromHex("#22D3EE"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#0a1418"), Button = Color3.fromHex("#1e4550"), Icon = Color3.fromHex("#67E8F9")})
WindUI:AddTheme({Name = "Rose Pink", Accent = Color3.fromHex("#F43F5E"), Dialog = Color3.fromHex("#211619"), Outline = Color3.fromHex("#FB7185"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#180a0f"), Button = Color3.fromHex("#5f1e2d"), Icon = Color3.fromHex("#FDA4AF")})
WindUI:AddTheme({Name = "Golden Hour", Accent = Color3.fromHex("#FBBF24"), Dialog = Color3.fromHex("#21200f"), Outline = Color3.fromHex("#FCD34D"), Text = Color3.fromHex("#000000"), Placeholder = Color3.fromHex("#5a5a5a"), Background = Color3.fromHex("#1a1808"), Button = Color3.fromHex("#6b5a1e"), Icon = Color3.fromHex("#FDE68A")})
WindUI:AddTheme({Name = "Neon Green", Accent = Color3.fromHex("#22C55E"), Dialog = Color3.fromHex("#162116"), Outline = Color3.fromHex("#4ADE80"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#0a1610"), Button = Color3.fromHex("#1e5f2d"), Icon = Color3.fromHex("#86EFAC")})
WindUI:AddTheme({Name = "Electric Blue", Accent = Color3.fromHex("#3B82F6"), Dialog = Color3.fromHex("#161c28"), Outline = Color3.fromHex("#60A5FA"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#0a1220"), Button = Color3.fromHex("#1e3d6b"), Icon = Color3.fromHex("#93C5FD")})
WindUI:AddTheme({Name = "Custom", Accent = Color3.fromHex("#FF0F7B"), Dialog = Color3.fromHex("#161616"), Outline = Color3.fromHex("#FF0F7B"), Text = Color3.fromHex("#FFFFFF"), Placeholder = Color3.fromHex("#7a7a7a"), Background = Color3.fromHex("#101010"), Button = Color3.fromHex("#52525b"), Icon = Color3.fromHex("#FF0F7B")})

WindUI:SetTheme("Anime Dark")

local Window = WindUI:CreateWindow({
    Title = "Steal A Clown SHX | Official",
    Icon = "sword",
    Author = "by PickleTalk and Mhicel",
    Folder = "Scripts Hub X",
    Transparent = true,
    Theme = "Anime Dark",
})

Window:ToggleTransparency(true)

local ConfigManager = Window.ConfigManager
local myConfig = ConfigManager:CreateConfig("Scripts Hub X")

Window:EditOpenButton({
    Title = "Scripts Hub X | Official",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

local MainTab = Window:Tab({Title = "Main", Icon = "home"})
local PlayerTab = Window:Tab({Title = "Player", Icon = "user"})
local VisualsTab = Window:Tab({Title = "Visuals", Icon = "eye"})
local CreditsTab = Window:Tab({Title = "Credits", Icon = "info"})
local SettingsTab = Window:Tab({Title = "Settings", Icon = "settings"})

local function findPlayerPlot()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return nil end
    
    for _, plot in pairs(plots:GetChildren()) do
        local plotSign = plot:FindFirstChild("PlotSign")
        if plotSign then
            local surfaceGui = plotSign:FindFirstChild("SurfaceGui")
            if surfaceGui then
                local frame = surfaceGui:FindFirstChild("Frame")
                if frame then
                    local textLabel = frame:FindFirstChild("TextLabel")
                    if textLabel and textLabel.Text == player.Name .. "'s Base" then
                        return plot.Name
                    end
                end
            end
        end
    end
    return nil
end

local function setNetworkOwnership(state)
    local char = player.Character
    local rootPart = char and char:FindFirstChild("HumanoidRootPart")
    
    if rootPart then
        local success, err = pcall(function()
            if state then
                sethiddenproperty(rootPart, "NetworkOwnershipRule", Enum.NetworkOwnership.Manual)
            else
                sethiddenproperty(rootPart, "NetworkOwnershipRule", Enum.NetworkOwnership.Automatic)
            end
        end)
        
        if not success then
            warn("Desync Error: " .. tostring(err))
        end
    end
end

local function createDesyncUI()
    if States.DesyncUI then States.DesyncUI:Destroy() end
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DesyncUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 120, 0, 40)
    Frame.Position = UDim2.new(0.5, -60, 0.1, 0)
    Frame.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = Frame
    
    local UIStroke = Instance.new("UIStroke")
    UIStroke.Color = Color3.fromRGB(255, 15, 123)
    UIStroke.Thickness = 2
    UIStroke.Parent = Frame
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Size = UDim2.new(1, 0, 1, 0)
    TextLabel.BackgroundTransparency = 1
    TextLabel.Text = "Desync: OFF"
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.Font = Enum.Font.GothamBold
    TextLabel.TextSize = 14
    TextLabel.Parent = Frame
    
    local dragging = false
    local dragStart = nil
    local startPos = nil
    local dragDistance = 0
    
    Frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Frame.Position
            dragDistance = 0
        end
    end)
    
    Frame.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            dragDistance = math.sqrt(delta.X^2 + delta.Y^2)
            Frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    Frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            
            if dragDistance < 5 then
                States.DesyncEnabled = not States.DesyncEnabled
                setNetworkOwnership(States.DesyncEnabled)
                TextLabel.Text = States.DesyncEnabled and "Desync: ON" or "Desync: OFF"
                UIStroke.Color = States.DesyncEnabled and Color3.fromRGB(34, 197, 94) or Color3.fromRGB(255, 15, 123)
                
                WindUI:Notify({
                    Title = States.DesyncEnabled and "Desync Enabled" or "Desync Disabled",
                    Content = States.DesyncEnabled and "Network ownership set to manual" or "Network ownership set to automatic",
                    Duration = 2,
                    Icon = "shield",
                })
            end
        end
    end)
    
    ScreenGui.Parent = player:WaitForChild("PlayerGui")
    States.DesyncUI = ScreenGui
    return ScreenGui
end

local function setupInstantTeleport()
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        if method == "FireServer" and self.Parent and self.Parent.Name == "Net" then
            if self.Name:sub(1, 3) == "RE/" then
                if type(args[1]) == "number" and type(args[2]) == "string" and type(args[3]) == "string" and type(args[4]) == "number" then
                    if States.InstantTeleportEnabled and States.PlayerPlot then
                        spawn(function()
                            local char = player.Character
                            if char and char:FindFirstChild("HumanoidRootPart") then
                                local savedPos = char.HumanoidRootPart.CFrame
                                
                                local plotPath = Workspace.Plots:FindFirstChild(States.PlayerPlot)
                                if plotPath and plotPath:FindFirstChild("DeliveryHitbox") then
                                    char.HumanoidRootPart.CFrame = plotPath.DeliveryHitbox.CFrame
                                    task.wait(0.05)
                                    char.HumanoidRootPart.CFrame = savedPos
                                end
                            end
                        end)
                    end
                end
            end
        end
        
        return oldNamecall(self, ...)
    end)
end

local function clearESP(espType)
    if States.ESPObjects[espType] then
        for _, obj in pairs(States.ESPObjects[espType]) do
            if obj then
                pcall(function() obj:Destroy() end)
            end
        end
        States.ESPObjects[espType] = {}
    end
end

local function createPlayerESP()
    clearESP("Players")
    States.ESPObjects.Players = {}
    
    for _, targetPlayer in pairs(Players:GetPlayers()) do
        if targetPlayer ~= player and targetPlayer.Character then
            local char = targetPlayer.Character
            local hrp = char:FindFirstChild("HumanoidRootPart")
            
            if hrp then
                local highlight = Instance.new("Highlight")
                highlight.FillColor = Color3.fromRGB(255, 255, 0)
                highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0
                highlight.Parent = char
                
                local billboardGui = Instance.new("BillboardGui")
                billboardGui.Size = UDim2.new(0, 100, 0, 40)
                billboardGui.StudsOffset = Vector3.new(0, 3, 0)
                billboardGui.AlwaysOnTop = true
                billboardGui.Parent = hrp
                
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.Text = targetPlayer.Name
                textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                textLabel.Font = Enum.Font.GothamBold
                textLabel.TextSize = 14
                textLabel.TextStrokeTransparency = 0.5
                textLabel.Parent = billboardGui
                
                table.insert(States.ESPObjects.Players, highlight)
                table.insert(States.ESPObjects.Players, billboardGui)
            end
        end
    end
end

local function createBaseESP()
    clearESP("Bases")
    States.ESPObjects.Bases = {}
    
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return end
    
    for _, plot in pairs(plots:GetChildren()) do
        local plotSign = plot:FindFirstChild("PlotSign")
        if plotSign then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.fromRGB(0, 255, 255)
            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            highlight.FillTransparency = 0.7
            highlight.OutlineTransparency = 0
            highlight.Parent = plotSign
            
            table.insert(States.ESPObjects.Bases, highlight)
        end
    end
end

local function createTimerESP()
    clearESP("Timers")
    States.ESPObjects.Timers = {}
    
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return end
    
    for _, plot in pairs(plots:GetChildren()) do
        local purchases = plot:FindFirstChild("Purchases")
        if purchases then
            local plotBlock = purchases:FindFirstChild("PlotBlock")
            if plotBlock and plotBlock:FindFirstChild("Main") then
                local billboardGui = plotBlock.Main:FindFirstChild("BillboardGui")
                if billboardGui then
                    local remainingTime = billboardGui:FindFirstChild("RemainingTime")
                    if remainingTime then
                        local timeText = remainingTime.Text
                        local timeValue = tonumber(timeText:match("%d+")) or 0
                        
                        local color
                        if timeValue == 0 then
                            color = Color3.fromRGB(0, 255, 0)
                        elseif timeValue < 5 then
                            color = Color3.fromRGB(255, 255, 0)
                        else
                            color = Color3.fromRGB(255, 0, 0)
                        end
                        
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = color
                        highlight.OutlineColor = color
                        highlight.FillTransparency = 0.6
                        highlight.OutlineTransparency = 0.3
                        highlight.Parent = plotBlock.Main
                        
                        table.insert(States.ESPObjects.Timers, highlight)
                    end
                end
            end
        end
    end
end

local timerUI = nil
local function createTimerUI()
    if timerUI then timerUI:Destroy() end
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "BaseTimerUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 200, 0, 70)
    Frame.Position = UDim2.new(1, -220, 0, 100)
    Frame.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = Frame
    
    local UIStroke = Instance.new("UIStroke")
    UIStroke.Color = Color3.fromRGB(255, 15, 123)
    UIStroke.Thickness = 2
    UIStroke.Parent = Frame
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -10, 0, 25)
    Title.Position = UDim2.new(0, 5, 0, 5)
    Title.BackgroundTransparency = 1
    Title.Text = "Base Remaining Timer"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 12
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Frame
    
    local TimeLabel = Instance.new("TextLabel")
    TimeLabel.Size = UDim2.new(1, -10, 0, 30)
    TimeLabel.Position = UDim2.new(0, 5, 0, 35)
    TimeLabel.BackgroundTransparency = 1
    TimeLabel.Text = "Remaining Time: --"
    TimeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TimeLabel.Font = Enum.Font.Gotham
    TimeLabel.TextSize = 14
    TimeLabel.TextXAlignment = Enum.TextXAlignment.Left
    TimeLabel.Parent = Frame
    
    ScreenGui.Parent = player:WaitForChild("PlayerGui")
    timerUI = ScreenGui
    
    spawn(function()
        while timerUI and timerUI.Parent do
            if States.PlayerPlot then
                local plots = Workspace:FindFirstChild("Plots")
                if plots then
                    local plot = plots:FindFirstChild(States.PlayerPlot)
                    if plot then
                        local purchases = plot:FindFirstChild("Purchases")
                        if purchases then
                            local plotBlock = purchases:FindFirstChild("PlotBlock")
                            if plotBlock and plotBlock:FindFirstChild("Main") then
                                local billboardGui = plotBlock.Main:FindFirstChild("BillboardGui")
                                if billboardGui then
                                    local remainingTime = billboardGui:FindFirstChild("RemainingTime")
                                    if remainingTime then
                                        TimeLabel.Text = "Remaining Time: " .. remainingTime.Text
                                    end
                                end
                            end
                        end
                    end
                end
            end
            task.wait(0.5)
        end
    end)
end

local InstantTeleportToggle = MainTab:Toggle({
    Title = "Instant Teleport",
    Desc = "Auto teleport to delivery when stealing",
    Icon = "zap",
    Default = false,
    Callback = function(state)
        States.InstantTeleportEnabled = state
        if state then
            States.PlayerPlot = findPlayerPlot()
            if States.PlayerPlot then
                WindUI:Notify({
                    Title = "Instant Teleport Enabled",
                    Content = "Plot detected: " .. States.PlayerPlot,
                    Duration = 2,
                    Icon = "check",
                })
            else
                WindUI:Notify({
                    Title = "Plot Not Found",
                    Content = "Could not find your base plot",
                    Duration = 3,
                    Icon = "alert-circle",
                })
            end
        end
    end
})

local FastInteractionToggle = MainTab:Toggle({
    Title = "Fast Interaction",
    Desc = "Instant proximity prompts",
    Icon = "hand",
    Default = false,
    Callback = function(state)
        States.FastInteractionEnabled = state
        WindUI:Notify({
            Title = state and "Fast Interaction On" or "Fast Interaction Off",
            Content = state and "All prompts set to instant" or "Prompts restored to normal",
            Duration = 2,
            Icon = "check",
        })
    end
})

local DesyncButton = MainTab:Button({
    Title = "Desync",
    Desc = "Create draggable desync UI",
    Callback = function()
        createDesyncUI()
        WindUI:Notify({
            Title = "Desync UI Created",
            Content = "Click the UI to toggle desync",
            Duration = 2,
            Icon = "shield",
        })
    end
})

local AutoLockToggle = MainTab:Toggle({
    Title = "Auto Lock",
    Desc = "Auto lock plot when timer hits 0s",
    Icon = "lock",
    Default = false,
    Callback = function(state)
        States.AutoLockEnabled = state
        WindUI:Notify({
            Title = state and "Auto Lock Enabled" or "Auto Lock Disabled",
            Content = state and "Will auto lock at 0s" or "Auto lock disabled",
            Duration = 2,
            Icon = "check",
        })
    end
})

local NoclipToggle = PlayerTab:Toggle({
    Title = "Noclip",
    Desc = "Walk through walls",
    Icon = "ghost",
    Default = false,
    Callback = function(state)
        States.NoclipEnabled = state
        WindUI:Notify({
            Title = state and "Noclip Enabled" or "Noclip Disabled",
            Content = state and "You can now walk through walls" or "Collisions restored",
            Duration = 2,
            Icon = "check",
        })
    end
})

local AntiRagdollToggle = PlayerTab:Toggle({
    Title = "Anti-Ragdoll",
    Desc = "Prevent ragdoll effects",
    Icon = "shield",
    Default = false,
    Callback = function(state)
        States.AntiRagdollEnabled = state
        WindUI:Notify({
            Title = state and "Anti-Ragdoll On" or "Anti-Ragdoll Off",
            Content = state and "Ragdoll effects disabled" or "Ragdoll restored",
            Duration = 2,
            Icon = "check",
        })
    end
})

local GodModeToggle = PlayerTab:Toggle({
    Title = "God Mode",
    Desc = "Become invincible",
    Icon = "heart",
    Default = false,
    Callback = function(state)
        States.GodModeEnabled = state
        local char = player.Character
        if char and char:FindFirstChild("Humanoid") then
            if state then
                char.Humanoid.MaxHealth = math.huge
                char.Humanoid.Health = math.huge
            else
                char.Humanoid.MaxHealth = 100
                char.Humanoid.Health = 100
            end
        end
        WindUI:Notify({
            Title = state and "God Mode Enabled" or "God Mode Disabled",
            Content = state and "You are now invincible" or "Health restored to normal",
            Duration = 2,
            Icon = "check",
        })
    end
})

local AntiVoidToggle = PlayerTab:Toggle({
    Title = "Anti-Void",
    Desc = "Invisible platform below you",
    Icon = "box",
    Default = false,
    Callback = function(state)
        States.AntiVoidEnabled = state
        if state then
            local char = player.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                local platform = Instance.new("Part")
                platform.Size = Vector3.new(20, 1, 20)
                platform.Position = char.HumanoidRootPart.Position - Vector3.new(0, 15, 0)
                platform.Anchored = true
                platform.Transparency = 1
                platform.CanCollide = true
                platform.Parent = Workspace
                States.AntiVoidPlatform = platform
            end
            WindUI:Notify({
                Title = "Anti-Void Enabled",
                Content = "Platform created below you",
                Duration = 2,
                Icon = "check",
            })
        else
            if States.AntiVoidPlatform then
                States.AntiVoidPlatform:Destroy()
                States.AntiVoidPlatform = nil
            end
            WindUI:Notify({
                Title = "Anti-Void Disabled",
                Content = "Platform removed",
                Duration = 2,
                Icon = "check",
            })
        end
    end
})

local InfiniteJumpToggle = PlayerTab:Toggle({
    Title = "Infinite Jump",
    Desc = "Jump infinitely in the air",
    Icon = "arrow-up",
    Default = false,
    Callback = function(state)
        States.InfiniteJumpEnabled = state
        WindUI:Notify({
            Title = state and "Infinite Jump On" or "Infinite Jump Off",
            Content = state and "You can now jump infinitely" or "Jump restored to normal",
            Duration = 2,
            Icon = "check",
        })
    end
})

local SpeedSlider = PlayerTab:Slider({
    Title = "Walk Speed",
    Step = 1,
    Value = {Min = 16, Max = 100, Default = 16},
    Callback = function(value)
        States.WalkSpeed = value
    end
})

local PlayerESPToggle = VisualsTab:Toggle({
    Title = "Player ESP",
    Desc = "Highlight all players",
    Icon = "users",
    Default = false,
    Callback = function(state)
        States.PlayerESPEnabled = state
        if state then
            createPlayerESP()
        else
            clearESP("Players")
        end
    end
})

local BaseESPToggle = VisualsTab:Toggle({
    Title = "Base ESP",
    Desc = "Highlight all base signs",
    Icon = "home",
    Default = false,
    Callback = function(state)
        States.BaseESPEnabled = state
        if state then
            createBaseESP()
        else
            clearESP("Bases")
        end
    end
})

local TimerESPToggle = VisualsTab:Toggle({
    Title = "Base Timer ESP",
    Desc = "Color-coded timer highlights",
    Icon = "clock",
    Default = false,
    Callback = function(state)
        States.TimerESPEnabled = state
        if state then
            createTimerESP()
        else
            clearESP("Timers")
        end
    end
})

local TimerUIToggle = VisualsTab:Toggle({
    Title = "Base Remaining Timer UI",
    Desc = "Show your base timer",
    Icon = "timer",
    Default = false,
    Callback = function(state)
        if state then
            States.PlayerPlot = findPlayerPlot()
            createTimerUI()
        else
            if timerUI then
                timerUI:Destroy()
                timerUI = nil
            end
        end
    end
})

myConfig:Register("InstantTeleport", InstantTeleportToggle)
myConfig:Register("FastInteraction", FastInteractionToggle)
myConfig:Register("AutoLock", AutoLockToggle)
myConfig:Register("Noclip", NoclipToggle)
myConfig:Register("AntiRagdoll", AntiRagdollToggle)
myConfig:Register("GodMode", GodModeToggle)
myConfig:Register("AntiVoid", AntiVoidToggle)
myConfig:Register("InfiniteJump", InfiniteJumpToggle)
myConfig:Register("WalkSpeed", SpeedSlider)
myConfig:Register("PlayerESP", PlayerESPToggle)
myConfig:Register("BaseESP", BaseESPToggle)
myConfig:Register("TimerESP", TimerESPToggle)

local function saveConfiguration()
    myConfig:Save()
    WindUI:Notify({
        Title = "Configuration Saved",
        Content = "All settings saved successfully",
        Duration = 2,
        Icon = "check",
    })
end

local function loadConfiguration()
    myConfig:Load()
    WindUI:Notify({
        Title = "Configuration Loaded",
        Content = "Settings restored successfully",
        Duration = 2,
        Icon = "check",
    })
end

local function changeTheme(themeName)
    WindUI:SetTheme(themeName)
    States.CurrentTheme = themeName
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Theme set to " .. themeName,
        Duration = 2,
        Icon = "palette",
    })
end

local CreditsParagraph = CreditsTab:Paragraph({
    Title = "Scripts Hub X | Official",
    Desc = "Made by PickleTalk and Mhicel. Join our discord server to be always updated with the latest features and scripts!",
    Color = "Red",
    Thumbnail = "rbxassetid://74135635728836",
    ThumbnailSize = 140,
    Buttons = {
        {
            Icon = "users",
            Title = "Discord",
            Callback = function()
                setclipboard("https://discord.gg/bpsNUH5sVb")
                WindUI:Notify({
                    Title = "Discord Link Copied!",
                    Content = "Discord invite link copied to clipboard!",
                    Duration = 3,
                    Icon = "check",
                })
            end,
        }
    }
})

local SaveConfigButton = SettingsTab:Button({
    Title = "Save Configuration",
    Desc = "Save all current settings to file",
    Callback = function()
        saveConfiguration()
    end
})

local LoadConfigButton = SettingsTab:Button({
    Title = "Load Configuration",
    Desc = "Load your saved settings from file",
    Callback = function()
        loadConfiguration()
    end
})

local ThemeDropdown = SettingsTab:Dropdown({
    Title = "Theme Selector",
    Values = {
        {Title = "Anime Dark", Icon = "moon"},
        {Title = "Anime Light", Icon = "sun"},
        {Title = "Purple Dream", Icon = "sparkles"},
        {Title = "Ocean Blue", Icon = "waves"},
        {Title = "Forest Green", Icon = "tree-deciduous"},
        {Title = "Crimson Red", Icon = "flame"},
        {Title = "Sunset Orange", Icon = "sunset"},
        {Title = "Midnight Purple", Icon = "moon-star"},
        {Title = "Cyan Glow", Icon = "zap"},
        {Title = "Rose Pink", Icon = "heart"},
        {Title = "Golden Hour", Icon = "sun"},
        {Title = "Neon Green", Icon = "zap-off"},
        {Title = "Electric Blue", Icon = "sparkle"},
        {Title = "Custom", Icon = "palette"},
    },
    Value = "Anime Dark",
    Callback = function(option)
        changeTheme(option.Title)
    end
})

local ThemeColorPicker = SettingsTab:Colorpicker({
    Title = "Custom Theme Color",
    Desc = "Select a custom accent color for the UI",
    Default = Color3.fromRGB(255, 15, 123),
    Callback = function(color)
        WindUI:AddTheme({
            Name = "Custom",
            Accent = color,
            Dialog = Color3.fromHex("#161616"),
            Outline = color,
            Text = Color3.fromHex("#FFFFFF"),
            Placeholder = Color3.fromHex("#7a7a7a"),
            Background = Color3.fromHex("#101010"),
            Button = Color3.fromHex("#52525b"),
            Icon = color
        })
        WindUI:SetTheme("Custom")
        States.CurrentTheme = "Custom"
    end
})

myConfig:Register("Theme", ThemeDropdown)
myConfig:Register("ThemeColor", ThemeColorPicker)

RunService.Heartbeat:Connect(function()
    local char = player.Character
    if not char then return end
    
    if States.NoclipEnabled then
        for _, part in pairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
    
    if States.WalkSpeed ~= 16 then
        local hum = char:FindFirstChild("Humanoid")
        if hum then
            hum.WalkSpeed = States.WalkSpeed
        end
    end
    
    if States.AntiVoidEnabled and States.AntiVoidPlatform then
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if hrp then
            States.AntiVoidPlatform.Position = Vector3.new(hrp.Position.X, hrp.Position.Y - 15, hrp.Position.Z)
        end
    end
end)

spawn(function()
    while task.wait(0.5) do
        if States.FastInteractionEnabled then
            for _, prompt in ipairs(Workspace:GetDescendants()) do
                if prompt:IsA("ProximityPrompt") then
                    prompt.HoldDuration = 0
                    prompt.MaxActivationDistance = 25
                end
            end
        end
    end
end)

spawn(function()
    while task.wait(1) do
        if States.AutoLockEnabled and States.PlayerPlot then
            local plots = Workspace:FindFirstChild("Plots")
            if plots then
                local plot = plots:FindFirstChild(States.PlayerPlot)
                if plot then
                    local purchases = plot:FindFirstChild("Purchases")
                    if purchases then
                        local plotBlock = purchases:FindFirstChild("PlotBlock")
                        if plotBlock and plotBlock:FindFirstChild("Main") then
                            local billboardGui = plotBlock.Main:FindFirstChild("BillboardGui")
                            if billboardGui then
                                local remainingTime = billboardGui:FindFirstChild("RemainingTime")
                                if remainingTime and remainingTime.Text == "0s" then
                                    local hitbox = plotBlock:FindFirstChild("Hitbox")
                                    if hitbox then
                                        firetouchinterest(player.Character.HumanoidRootPart, hitbox, 0)
                                        task.wait(0.1)
                                        firetouchinterest(player.Character.HumanoidRootPart, hitbox, 1)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)

spawn(function()
    while task.wait(0.5) do
        if States.PlayerESPEnabled then
            createPlayerESP()
        end
        if States.TimerESPEnabled then
            createTimerESP()
        end
    end
end)

UserInputService.JumpRequest:Connect(function()
    if States.InfiniteJumpEnabled then
        local char = player.Character
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if hum then
            hum:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
    
    task.wait(1)
    
    if States.DesyncEnabled then
        setNetworkOwnership(true)
    end
    
    if States.GodModeEnabled then
        humanoid.MaxHealth = math.huge
        humanoid.Health = math.huge
    end
    
    if States.AntiVoidEnabled then
        local hrp = char:WaitForChild("HumanoidRootPart")
        if States.AntiVoidPlatform then
            States.AntiVoidPlatform:Destroy()
        end
        local platform = Instance.new("Part")
        platform.Size = Vector3.new(20, 1, 20)
        platform.Position = hrp.Position - Vector3.new(0, 15, 0)
        platform.Anchored = true
        platform.Transparency = 1
        platform.CanCollide = true
        platform.Parent = Workspace
        States.AntiVoidPlatform = platform
    end
end)

setupInstantTeleport()

States.PlayerPlot = findPlayerPlot()

WindUI:Popup({
    Title = "Steal A Clown Hub v1.0",
    Icon = "sword",
    Content = "New Update: Added Instant Teleport, Fast Interaction, Desync, Auto Lock, Player ESP, Base ESP, Timer ESP, and more!",
    Buttons = {
        {
            Title = "Close",
            Callback = function() end,
            Variant = "Tertiary",
        },
        {
            Title = "Join Discord",
            Icon = "users",
            Callback = function()
                setclipboard("https://discord.gg/bpsNUH5sVb")
                WindUI:Notify({
                    Title = "Link Copied!",
                    Content = "Discord invite copied to clipboard!",
                    Duration = 3,
                    Icon = "check",
                })
            end,
            Variant = "Primary",
        }
    }
})