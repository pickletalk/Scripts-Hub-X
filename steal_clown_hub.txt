--  =============================================================================================================================
-- || STEAL A CLOWN - SCRIPTS HUB X | OFFICIAL                                                                              ||
-- || Created by PickleTalk and Mhicel                                                                                      ||
-- || Discord: https://discord.gg/bpsNUH5sVb                                                                                ||
--  =============================================================================================================================

-- Load The Library
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer

-- States
local States = {
    InstantStealEnabled = false,
    NoClipEnabled = false,
    AntiRagdollEnabled = false,
    FastInteractionEnabled = false,
    DesyncEnabled = false,
    GodModeEnabled = false,
    AntiVoidEnabled = false,
    InfJumpEnabled = false,
    SpeedEnabled = false,
    SpeedValue = 16,
    AutoLockEnabled = false,
    PlayerESPEnabled = false,
    BaseESPEnabled = false,
    BaseTimerESPEnabled = false,
    BaseTimerUIEnabled = false,
    PlayerPlotName = nil,
    CurrentTheme = "Anime Dark",
}

-- ========================================
-- THEMES (10+ COLOR VARIATIONS)
-- ========================================
WindUI:AddTheme({
    Name = "Anime Dark",
    Accent = Color3.fromHex("#FF0F7B"),
    Dialog = Color3.fromHex("#161616"),
    Outline = Color3.fromHex("#FF0F7B"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#101010"),
    Button = Color3.fromHex("#52525b"),
    Icon = Color3.fromHex("#FF0F7B")
})

WindUI:AddTheme({
    Name = "Anime Light",
    Accent = Color3.fromHex("#F89B29"),
    Dialog = Color3.fromHex("#f5f5f5"),
    Outline = Color3.fromHex("#F89B29"),
    Text = Color3.fromHex("#000000"),
    Placeholder = Color3.fromHex("#5a5a5a"),
    Background = Color3.fromHex("#ffffff"),
    Button = Color3.fromHex("#e5e5e5"),
    Icon = Color3.fromHex("#F89B29")
})

WindUI:AddTheme({
    Name = "Purple Dream",
    Accent = Color3.fromHex("#9333EA"),
    Dialog = Color3.fromHex("#1a1625"),
    Outline = Color3.fromHex("#A855F7"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0f0b16"),
    Button = Color3.fromHex("#4c2a6e"),
    Icon = Color3.fromHex("#C084FC")
})

WindUI:AddTheme({
    Name = "Ocean Blue",
    Accent = Color3.fromHex("#0EA5E9"),
    Dialog = Color3.fromHex("#161e28"),
    Outline = Color3.fromHex("#38BDF8"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0a1420"),
    Button = Color3.fromHex("#1e3a5f"),
    Icon = Color3.fromHex("#7DD3FC")
})

WindUI:AddTheme({
    Name = "Forest Green",
    Accent = Color3.fromHex("#10B981"),
    Dialog = Color3.fromHex("#16211c"),
    Outline = Color3.fromHex("#34D399"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0a1610"),
    Button = Color3.fromHex("#1e4d3a"),
    Icon = Color3.fromHex("#6EE7B7")
})

WindUI:AddTheme({
    Name = "Crimson Red",
    Accent = Color3.fromHex("#DC2626"),
    Dialog = Color3.fromHex("#211616"),
    Outline = Color3.fromHex("#EF4444"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#180a0a"),
    Button = Color3.fromHex("#5f1e1e"),
    Icon = Color3.fromHex("#F87171")
})

WindUI:AddTheme({
    Name = "Sunset Orange",
    Accent = Color3.fromHex("#F97316"),
    Dialog = Color3.fromHex("#211a16"),
    Outline = Color3.fromHex("#FB923C"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#18120a"),
    Button = Color3.fromHex("#5f371e"),
    Icon = Color3.fromHex("#FDBA74")
})

WindUI:AddTheme({
    Name = "Midnight Purple",
    Accent = Color3.fromHex("#7C3AED"),
    Dialog = Color3.fromHex("#1a1625"),
    Outline = Color3.fromHex("#8B5CF6"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0f0a18"),
    Button = Color3.fromHex("#3d2a5f"),
    Icon = Color3.fromHex("#A78BFA")
})

WindUI:AddTheme({
    Name = "Cyan Glow",
    Accent = Color3.fromHex("#06B6D4"),
    Dialog = Color3.fromHex("#162228"),
    Outline = Color3.fromHex("#22D3EE"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0a1418"),
    Button = Color3.fromHex("#1e4550"),
    Icon = Color3.fromHex("#67E8F9")
})

WindUI:AddTheme({
    Name = "Rose Pink",
    Accent = Color3.fromHex("#F43F5E"),
    Dialog = Color3.fromHex("#211619"),
    Outline = Color3.fromHex("#FB7185"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#180a0f"),
    Button = Color3.fromHex("#5f1e2d"),
    Icon = Color3.fromHex("#FDA4AF")
})

WindUI:AddTheme({
    Name = "Golden Hour",
    Accent = Color3.fromHex("#FBBF24"),
    Dialog = Color3.fromHex("#21200f"),
    Outline = Color3.fromHex("#FCD34D"),
    Text = Color3.fromHex("#000000"),
    Placeholder = Color3.fromHex("#5a5a5a"),
    Background = Color3.fromHex("#1a1808"),
    Button = Color3.fromHex("#6b5a1e"),
    Icon = Color3.fromHex("#FDE68A")
})

WindUI:AddTheme({
    Name = "Neon Green",
    Accent = Color3.fromHex("#22C55E"),
    Dialog = Color3.fromHex("#162116"),
    Outline = Color3.fromHex("#4ADE80"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0a1610"),
    Button = Color3.fromHex("#1e5f2d"),
    Icon = Color3.fromHex("#86EFAC")
})

WindUI:AddTheme({
    Name = "Electric Blue",
    Accent = Color3.fromHex("#3B82F6"),
    Dialog = Color3.fromHex("#161c28"),
    Outline = Color3.fromHex("#60A5FA"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0a1220"),
    Button = Color3.fromHex("#1e3d6b"),
    Icon = Color3.fromHex("#93C5FD")
})

WindUI:AddTheme({
    Name = "Custom",
    Accent = Color3.fromHex("#FF0F7B"),
    Dialog = Color3.fromHex("#161616"),
    Outline = Color3.fromHex("#FF0F7B"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#101010"),
    Button = Color3.fromHex("#52525b"),
    Icon = Color3.fromHex("#FF0F7B")
})

WindUI:SetTheme("Anime Dark")

-- Creating Window
local Window = WindUI:CreateWindow({
    Title = "Steal A Clown SHX | Official",
    Icon = "skull",
    Author = "by PickleTalk and Mhicel",
    Folder = "Scripts Hub X",
    Transparent = true,
    Theme = "Anime Dark",
})

Window:ToggleTransparency(true)

-- CONFIG MANAGER
local ConfigManager = Window.ConfigManager
local myConfig = ConfigManager:CreateConfig("Scripts Hub X")

-- Editing the minimized button
Window:EditOpenButton({
    Title = "Scripts Hub X | Official",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("FF0F7B"), 
        Color3.fromHex("F89B29")
    ),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

-- ========================================
-- UTILITY FUNCTIONS
-- ========================================

-- Find Player's Plot
local function findPlayerPlot()
    local plotsFolder = Workspace:FindFirstChild("Plots")
    if not plotsFolder then return nil end
    
    for _, plot in pairs(plotsFolder:GetChildren()) do
        if plot:IsA("Model") then
            local plotSign = plot:FindFirstChild("PlotSign")
            if plotSign then
                local surfaceGui = plotSign:FindFirstChild("SurfaceGui")
                if surfaceGui then
                    local frame = surfaceGui:FindFirstChild("Frame")
                    if frame then
                        local textLabel = frame:FindFirstChild("TextLabel")
                        if textLabel and textLabel.Text == LocalPlayer.Name .. "'s Base" then
                            return plot.Name
                        end
                    end
                end
            end
        end
    end
    return nil
end

-- Update player plot periodically
spawn(function()
    while wait(5) do
        States.PlayerPlotName = findPlayerPlot()
    end
end)

-- ========================================
-- INSTANT STEAL SYSTEM
-- ========================================
local oldPosition = nil
local InstantStealConnection = nil

local function setupInstantSteal()
    if InstantStealConnection then
        InstantStealConnection:Disconnect()
    end
    
    local netFolder = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net")
    
    for _, remote in pairs(netFolder:GetChildren()) do
        if remote:IsA("RemoteEvent") and remote.Name:match("^RE/") then
            spawn(function()
                local connection
                connection = remote.OnClientEvent:Connect(function(...)
                    -- This won't work for FireServer, we need to hook it differently
                end)
                
                -- Hook the remote to detect FireServer calls
                local oldNamecall
                oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
                    local method = getnamecallmethod()
                    local args = {...}
                    
                    if States.InstantStealEnabled and method == "FireServer" and self == remote then
                        -- Check if args match the format
                        if #args >= 4 and type(args[1]) == "number" and type(args[2]) == "string" and type(args[3]) == "string" and args[4] == 7 then
                            -- This is the steal remote!
                            if States.PlayerPlotName then
                                local character = LocalPlayer.Character
                                if character and character:FindFirstChild("HumanoidRootPart") then
                                    oldPosition = character.HumanoidRootPart.CFrame
                                    
                                    -- Teleport to delivery
                                    local plot = Workspace.Plots:FindFirstChild(States.PlayerPlotName)
                                    if plot then
                                        local deliveryHitbox = plot:FindFirstChild("DeliveryHitbox")
                                        if deliveryHitbox then
                                            character.HumanoidRootPart.CFrame = deliveryHitbox.CFrame
                                            
                                            -- Wait a bit then teleport back
                                            wait(0.1)
                                            if oldPosition then
                                                character.HumanoidRootPart.CFrame = oldPosition
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                    
                    return oldNamecall(self, ...)
                end)
            end)
        end
    end
end

-- ========================================
-- NOCLIP SYSTEM
-- ========================================
local NoClipConnection = nil

local function setCharacterCollision(state)
    local character = LocalPlayer.Character
    if character then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = state
            end
        end
    end
end

local function toggleNoClip(state)
    States.NoClipEnabled = state
    
    if state then
        NoClipConnection = RunService.Stepped:Connect(function()
            setCharacterCollision(false)
        end)
        WindUI:Notify({
            Title = "No-Clip Enabled",
            Content = "You can now walk through walls!",
            Duration = 3,
            Icon = "ghost",
        })
    else
        if NoClipConnection then
            NoClipConnection:Disconnect()
            NoClipConnection = nil
        end
        setCharacterCollision(true)
        WindUI:Notify({
            Title = "No-Clip Disabled",
            Content = "Collision restored!",
            Duration = 3,
            Icon = "user",
        })
    end
end

-- ========================================
-- FAST INTERACTION SYSTEM
-- ========================================
local FastInteractionConnection = nil

local function toggleFastInteraction(state)
    States.FastInteractionEnabled = state
    
    if state then
        spawn(function()
            while States.FastInteractionEnabled and wait(0.5) do
                for _, prompt in ipairs(Workspace:GetDescendants()) do
                    if prompt:IsA("ProximityPrompt") then
                        prompt.HoldDuration = 0
                        prompt.MaxActivationDistance = 25
                    end
                end
            end
        end)
        WindUI:Notify({
            Title = "Fast Interaction Enabled",
            Content = "All interactions are now instant!",
            Duration = 3,
            Icon = "zap",
        })
    else
        WindUI:Notify({
            Title = "Fast Interaction Disabled",
            Content = "Interactions back to normal!",
            Duration = 3,
            Icon = "zap-off",
        })
    end
end

-- ========================================
-- DESYNC SYSTEM
-- ========================================
local DesyncUI = nil

local function setNetworkOwnership(state)
    local character = LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")

    if rootPart then
        if state then
            sethiddenproperty(rootPart, "NetworkOwnershipRule", Enum.NetworkOwnership.Manual)
        else
            sethiddenproperty(rootPart, "NetworkOwnershipRule", Enum.NetworkOwnership.Automatic)
        end
    end
end

local function createDesyncUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DesyncUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local Frame = Instance.new("Frame")
    Frame.Name = "DesyncButton"
    Frame.Size = UDim2.new(0, 120, 0, 40)
    Frame.Position = UDim2.new(0.5, -60, 0.1, 0)
    Frame.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = Frame
    
    local UIStroke = Instance.new("UIStroke")
    UIStroke.Color = Color3.fromRGB(255, 15, 123)
    UIStroke.Thickness = 2
    UIStroke.Parent = Frame
    
    local TextButton = Instance.new("TextButton")
    TextButton.Size = UDim2.new(1, 0, 1, 0)
    TextButton.BackgroundTransparency = 1
    TextButton.Text = "Desync: OFF"
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextSize = 14
    TextButton.Font = Enum.Font.GothamBold
    TextButton.Parent = Frame
    
    -- Dragging
    local dragging = false
    local dragInput, mousePos, framePos
    
    Frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = Frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    Frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            Frame.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Toggle functionality
    TextButton.MouseButton1Click:Connect(function()
        States.DesyncEnabled = not States.DesyncEnabled
        setNetworkOwnership(States.DesyncEnabled)
        
        if States.DesyncEnabled then
            TextButton.Text = "Desync: ON"
            UIStroke.Color = Color3.fromRGB(34, 197, 94)
            WindUI:Notify({
                Title = "Desync Enabled",
                Content = "Server position sync disabled!",
                Duration = 3,
                Icon = "shield",
            })
        else
            TextButton.Text = "Desync: OFF"
            UIStroke.Color = Color3.fromRGB(255, 15, 123)
            WindUI:Notify({
                Title = "Desync Disabled",
                Content = "Server position sync restored!",
                Duration = 3,
                Icon = "shield-off",
            })
        end
    end)
    
    ScreenGui.Parent = game:GetService("CoreGui")
    return ScreenGui
end

-- ========================================
-- GOD MODE SYSTEM
-- ========================================
local function toggleGodMode(state)
    States.GodModeEnabled = state
    local character = LocalPlayer.Character
    
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            if state then
                humanoid.MaxHealth = math.huge
                humanoid.Health = math.huge
                WindUI:Notify({
                    Title = "God Mode Enabled",
                    Content = "You are now invincible!",
                    Duration = 3,
                    Icon = "shield-check",
                })
            else
                humanoid.MaxHealth = 100
                humanoid.Health = 100
                WindUI:Notify({
                    Title = "God Mode Disabled",
                    Content = "You are now vulnerable!",
                    Duration = 3,
                    Icon = "shield-x",
                })
            end
        end
    end
end

-- ========================================
-- ANTI VOID SYSTEM
-- ========================================
local AntiVoidPart = nil

local function toggleAntiVoid(state)
    States.AntiVoidEnabled = state
    
    if state then
        AntiVoidPart = Instance.new("Part")
        AntiVoidPart.Size = Vector3.new(2000, 1, 2000)
        AntiVoidPart.Anchored = true
        AntiVoidPart.Transparency = 1
        AntiVoidPart.CanCollide = true
        AntiVoidPart.Parent = Workspace
        
        spawn(function()
            while States.AntiVoidEnabled and wait(0.1) do
                local character = LocalPlayer.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    AntiVoidPart.Position = character.HumanoidRootPart.Position - Vector3.new(0, 15, 0)
                end
            end
        end)
        
        WindUI:Notify({
            Title = "Anti Void Enabled",
            Content = "Invisible platform created below you!",
            Duration = 3,
            Icon = "layers",
        })
    else
        if AntiVoidPart then
            AntiVoidPart:Destroy()
            AntiVoidPart = nil
        end
        WindUI:Notify({
            Title = "Anti Void Disabled",
            Content = "Platform removed!",
            Duration = 3,
            Icon = "layers",
        })
    end
end

-- ========================================
-- INFINITE JUMP SYSTEM
-- ========================================
local InfJumpConnection = nil
local originalJumpPower = nil

local function toggleInfJump(state)
    States.InfJumpEnabled = state
    
    if state then
        InfJumpConnection = UserInputService.JumpRequest:Connect(function()
            local character = LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid and originalJumpPower then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    humanoid.JumpPower = originalJumpPower
                end
            end
        end)
        WindUI:Notify({
            Title = "Infinite Jump Enabled",
            Content = "Jump infinitely!",
            Duration = 3,
            Icon = "arrow-up",
        })
    else
        if InfJumpConnection then
            InfJumpConnection:Disconnect()
            InfJumpConnection = nil
        end
        WindUI:Notify({
            Title = "Infinite Jump Disabled",
            Content = "Normal jumping restored!",
            Duration = 3,
            Icon = "arrow-down",
        })
    end
end

-- Initialize original jump power
LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    originalJumpPower = humanoid.JumpPower
end)

if LocalPlayer.Character then
    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        originalJumpPower = humanoid.JumpPower
    end
end

-- ========================================
-- SPEED SYSTEM
-- ========================================
local WalkSpeedSpoof = {}
local CurrentHumanoid
local newindexhook
local indexhook
local cachedhumanoids = {}

local cloneref = cloneref or function(...)
    return ...
end

local GetDebugIdHandler = Instance.new("BindableFunction")
local TempHumanoid = Instance.new("Humanoid")

local function GetDebugId(obj)
    return obj:GetDebugId()
end

local function GetWalkSpeed(obj)
    TempHumanoid.WalkSpeed = obj
    return TempHumanoid.WalkSpeed
end

function cachedhumanoids:cacheHumanoid(DebugId, Humanoid)
    cachedhumanoids[DebugId] = {
        currentindex = indexhook(Humanoid, "WalkSpeed"),
        lastnewindex = nil
    }
    return self[DebugId]
end

indexhook = hookmetamethod(game, "__index", function(self, index)
    if not checkcaller() and typeof(self) == "Instance" then
        if self:IsA("Humanoid") then
            local DebugId = GetDebugId(self)
            local cached = cachedhumanoids[DebugId]

            if self:IsDescendantOf(LocalPlayer.Character) or cached then
                if type(index) == "string" then
                    local cleanindex = string.split(index, "\0")[1]

                    if cleanindex == "WalkSpeed" then
                        if not cached then
                            cached = cachedhumanoids:cacheHumanoid(DebugId, self)
                        end

                        if not (CurrentHumanoid and CurrentHumanoid:IsDescendantOf(game)) then
                            CurrentHumanoid = cloneref(self)
                        end

                        return cached.lastnewindex or cached.currentindex
                    end
                end
            end
        end
    end

    return indexhook(self, index)
end)

newindexhook = hookmetamethod(game, "__newindex", function(self, index, newindex)
    if not checkcaller() and typeof(self) == "Instance" then
        if self:IsA("Humanoid") then
            local DebugId = GetDebugId(self)
            local cached = cachedhumanoids[DebugId]

            if self:IsDescendantOf(LocalPlayer.Character) or cached then
                if type(index) == "string" then
                    local cleanindex = string.split(index, "\0")[1]

                    if cleanindex == "WalkSpeed" then
                        if not cached then
                            cached = cachedhumanoids:cacheHumanoid(DebugId, self)
                        end

                        if not (CurrentHumanoid and CurrentHumanoid:IsDescendantOf(game)) then
                            CurrentHumanoid = cloneref(self)
                        end
                        cached.lastnewindex = GetWalkSpeed(newindex)
                        return CurrentHumanoid.WalkSpeed
                    end
                end
            end
        end
    end
    
    return newindexhook(self, index, newindex)
end)

function WalkSpeedSpoof:GetHumanoid()
    return CurrentHumanoid or (function()
        local char = LocalPlayer.Character
        local Humanoid = char and char:FindFirstChildWhichIsA("Humanoid") or nil
        
        if Humanoid then
            cachedhumanoids:cacheHumanoid(Humanoid:GetDebugId(), Humanoid)
            return cloneref(Humanoid)
        end
    end)()
end

function WalkSpeedSpoof:SetWalkSpeed(speed)
    local Humanoid = WalkSpeedSpoof:GetHumanoid()

    if Humanoid then
        local connections = {}
        local function AddConnectionsFromSignal(Signal)
            for i, v in getconnections(Signal) do
                if v.State then
                    v:Disable()
                    table.insert(connections, v)
                end
            end
        end
        AddConnectionsFromSignal(Humanoid.Changed)
        AddConnectionsFromSignal(Humanoid:GetPropertyChangedSignal("WalkSpeed"))
        Humanoid.WalkSpeed = speed
        for i, v in connections do
            v:Enable()
        end
    end
end

function WalkSpeedSpoof:RestoreWalkSpeed()
    local Humanoid = WalkSpeedSpoof:GetHumanoid()
    
    if Humanoid then
        local cached = cachedhumanoids[Humanoid:GetDebugId()]

        if cached then
            WalkSpeedSpoof:SetWalkSpeed(cached.lastnewindex or cached.currentindex)
        end
    end
end

local function toggleSpeed(state, value)
    States.SpeedEnabled = state
    
    if state then
        WalkSpeedSpoof:SetWalkSpeed(value or States.SpeedValue)
        WindUI:Notify({
            Title = "Speed Enabled",
            Content = "Speed set to " .. tostring(value or States.SpeedValue),
            Duration = 3,
            Icon = "gauge",
        })
    else
        WalkSpeedSpoof:RestoreWalkSpeed()
        WindUI:Notify({
            Title = "Speed Disabled",
            Content = "Normal speed restored!",
            Duration = 3,
            Icon = "gauge",
        })
    end
end

-- ========================================
-- AUTO LOCK SYSTEM
-- ========================================
local AutoLockConnection = nil

local function toggleAutoLock(state)
    States.AutoLockEnabled = state
    
    if state then
        spawn(function()
            while States.AutoLockEnabled and wait(1) do
                if States.PlayerPlotName then
                    local plot = Workspace.Plots:FindFirstChild(States.PlayerPlotName)
                    if plot then
                        local purchases = plot:FindFirstChild("Purchases")
                        if purchases then
                            local plotBlock = purchases:FindFirstChild("PlotBlock")
                            if plotBlock then
                                local main = plotBlock:FindFirstChild("Main")
                                if main then
                                    local billboard = main:FindFirstChild("BillboardGui")
                                    if billboard then
                                        local remainingTime = billboard:FindFirstChild("RemainingTime")
                                        if remainingTime and remainingTime.Text == "0s" then
                                            local hitbox = plotBlock:FindFirstChild("Hitbox")
                                            if hitbox and hitbox:FindFirstChild("TouchInterest") then
                                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, hitbox, 0)
                                                wait(0.1)
                                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, hitbox, 1)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
        WindUI:Notify({
            Title = "Auto Lock Enabled",
            Content = "Will automatically lock when timer reaches 0!",
            Duration = 3,
            Icon = "lock",
        })
    else
        WindUI:Notify({
            Title = "Auto Lock Disabled",
            Content = "Auto lock stopped!",
            Duration = 3,
            Icon = "unlock",
        })
    end
end

-- ========================================
-- ESP SYSTEMS
-- ========================================
local PlayerESPs = {}
local BaseESPs = {}
local BaseTimerESPs = {}

-- Player ESP
local function createPlayerESP(player)
    if player == LocalPlayer then return end
    
    local function createESPForCharacter(character)
        if PlayerESPs[player] then
            for _, esp in pairs(PlayerESPs[player]) do
                if esp then esp:Destroy() end
            end
        end
        
        PlayerESPs[player] = {}
        
        -- Highlight
        local highlight = Instance.new("Highlight")
        highlight.FillColor = Color3.fromRGB(255, 0, 127)
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0
        highlight.Parent = character
        table.insert(PlayerESPs[player], highlight)
        
        -- Billboard
        local billboard = Instance.new("BillboardGui")
        billboard.Size = UDim2.new(0, 100, 0, 40)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.Parent = character:WaitForChild("Head")
        
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = player.Name
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.TextSize = 12
        textLabel.Font = Enum.Font.GothamBold
        textLabel.TextStrokeTransparency = 0.5
        textLabel.Parent = billboard
        table.insert(PlayerESPs[player], billboard)
    end
    
    if player.Character then
        createESPForCharacter(player.Character)
    end
    
    player.CharacterAdded:Connect(createESPForCharacter)
end

local function togglePlayerESP(state)
    States.PlayerESPEnabled = state
    
    if state then
        for _, player in pairs(Players:GetPlayers()) do
            createPlayerESP(player)
        end
        
        Players.PlayerAdded:Connect(function(player)
            if States.PlayerESPEnabled then
                createPlayerESP(player)
            end
        end)
        
        WindUI:Notify({
            Title = "Player ESP Enabled",
            Content = "All players are now highlighted!",
            Duration = 3,
            Icon = "users",
        })
    else
        for _, esps in pairs(PlayerESPs) do
            for _, esp in pairs(esps) do
                if esp then esp:Destroy() end
            end
        end
        PlayerESPs = {}
        WindUI:Notify({
            Title = "Player ESP Disabled",
            Content = "Player highlights removed!",
            Duration = 3,
            Icon = "user-x",
        })
    end
end

-- Base ESP
local function toggleBaseESP(state)
    States.BaseESPEnabled = state
    
    if state then
        local plotsFolder = Workspace:FindFirstChild("Plots")
        if plotsFolder then
            for _, plot in pairs(plotsFolder:GetChildren()) do
                if plot:IsA("Model") then
                    local plotSign = plot:FindFirstChild("PlotSign")
                    if plotSign then
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = Color3.fromRGB(0, 255, 127)
                        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                        highlight.FillTransparency = 0.7
                        highlight.OutlineTransparency = 0
                        highlight.Parent = plotSign
                        table.insert(BaseESPs, highlight)
                    end
                end
            end
        end
        WindUI:Notify({
            Title = "Base ESP Enabled",
            Content = "All plot signs are now highlighted!",
            Duration = 3,
            Icon = "home",
        })
    else
        for _, esp in pairs(BaseESPs) do
            if esp then esp:Destroy() end
        end
        BaseESPs = {}
        WindUI:Notify({
            Title = "Base ESP Disabled",
            Content = "Plot sign highlights removed!",
            Duration = 3,
            Icon = "home",
        })
    end
end

-- Base Timer ESP
local function getTimerColor(timeText)
    if timeText == "0s" then
        return Color3.fromRGB(34, 197, 94) -- Green
    end
    
    local seconds = tonumber(timeText:match("%d+"))
    if seconds then
        if seconds <= 5 then
            return Color3.fromRGB(34, 197, 94) -- Green
        elseif seconds <= 10 then
            return Color3.fromRGB(234, 179, 8) -- Yellow
        else
            return Color3.fromRGB(239, 68, 68) -- Red
        end
    end
    return Color3.fromRGB(234, 179, 8) -- Yellow default
end

local function toggleBaseTimerESP(state)
    States.BaseTimerESPEnabled = state
    
    if state then
        spawn(function()
            while States.BaseTimerESPEnabled and wait(1) do
                for _, esp in pairs(BaseTimerESPs) do
                    if esp then esp:Destroy() end
                end
                BaseTimerESPs = {}
                
                local plotsFolder = Workspace:FindFirstChild("Plots")
                if plotsFolder then
                    for _, plot in pairs(plotsFolder:GetChildren()) do
                        if plot:IsA("Model") then
                            local purchases = plot:FindFirstChild("Purchases")
                            if purchases then
                                local plotBlock = purchases:FindFirstChild("PlotBlock")
                                if plotBlock then
                                    local main = plotBlock:FindFirstChild("Main")
                                    if main then
                                        local billboard = main:FindFirstChild("BillboardGui")
                                        if billboard then
                                            local remainingTime = billboard:FindFirstChild("RemainingTime")
                                            if remainingTime and main:IsA("BasePart") then
                                                local espBillboard = Instance.new("BillboardGui")
                                                espBillboard.Size = UDim2.new(0, 100, 0, 40)
                                                espBillboard.StudsOffset = Vector3.new(0, 3, 0)
                                                espBillboard.AlwaysOnTop = true
                                                espBillboard.Parent = main
                                                
                                                local textLabel = Instance.new("TextLabel")
                                                textLabel.Size = UDim2.new(1, 0, 1, 0)
                                                textLabel.BackgroundTransparency = 1
                                                textLabel.Text = remainingTime.Text
                                                textLabel.TextColor3 = getTimerColor(remainingTime.Text)
                                                textLabel.TextSize = 14
                                                textLabel.Font = Enum.Font.GothamBold
                                                textLabel.TextStrokeTransparency = 0.5
                                                textLabel.Parent = espBillboard
                                                table.insert(BaseTimerESPs, espBillboard)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
        WindUI:Notify({
            Title = "Base Timer ESP Enabled",
            Content = "All base timers are now visible!",
            Duration = 3,
            Icon = "clock",
        })
    else
        for _, esp in pairs(BaseTimerESPs) do
            if esp then esp:Destroy() end
        end
        BaseTimerESPs = {}
        WindUI:Notify({
            Title = "Base Timer ESP Disabled",
            Content = "Base timer ESP removed!",
            Duration = 3,
            Icon = "clock",
        })
    end
end

-- Base Remaining Timer UI
local BaseTimerUI = nil

local function createBaseTimerUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "BaseTimerUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local Frame = Instance.new("Frame")
    Frame.Name = "TimerFrame"
    Frame.Size = UDim2.new(0, 250, 0, 80)
    Frame.Position = UDim2.new(0.5, -125, 0, 10)
    Frame.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = Frame
    
    local UIStroke = Instance.new("UIStroke")
    UIStroke.Color = Color3.fromRGB(255, 15, 123)
    UIStroke.Thickness = 2
    UIStroke.Parent = Frame
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -20, 0, 30)
    Title.Position = UDim2.new(0, 10, 0, 5)
    Title.BackgroundTransparency = 1
    Title.Text = "Base Remaining Timer"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 16
    Title.Font = Enum.Font.GothamBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Frame
    
    local TimeLabel = Instance.new("TextLabel")
    TimeLabel.Name = "TimeLabel"
    TimeLabel.Size = UDim2.new(1, -20, 0, 35)
    TimeLabel.Position = UDim2.new(0, 10, 0, 40)
    TimeLabel.BackgroundTransparency = 1
    TimeLabel.Text = "Remaining Time: --"
    TimeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TimeLabel.TextSize = 18
    TimeLabel.Font = Enum.Font.Gotham
    TimeLabel.TextXAlignment = Enum.TextXAlignment.Left
    TimeLabel.Parent = Frame
    
    ScreenGui.Parent = game:GetService("CoreGui")
    return ScreenGui
end

local function toggleBaseTimerUI(state)
    States.BaseTimerUIEnabled = state
    
    if state then
        if not BaseTimerUI then
            BaseTimerUI = createBaseTimerUI()
        end
        
        spawn(function()
            while States.BaseTimerUIEnabled and wait(0.5) do
                if States.PlayerPlotName then
                    local plot = Workspace.Plots:FindFirstChild(States.PlayerPlotName)
                    if plot then
                        local purchases = plot:FindFirstChild("Purchases")
                        if purchases then
                            local plotBlock = purchases:FindFirstChild("PlotBlock")
                            if plotBlock then
                                local main = plotBlock:FindFirstChild("Main")
                                if main then
                                    local billboard = main:FindFirstChild("BillboardGui")
                                    if billboard then
                                        local remainingTime = billboard:FindFirstChild("RemainingTime")
                                        if remainingTime then
                                            local timeLabel = BaseTimerUI.TimerFrame:FindFirstChild("TimeLabel")
                                            if timeLabel then
                                                timeLabel.Text = "Remaining Time: " .. remainingTime.Text
                                                timeLabel.TextColor3 = getTimerColor(remainingTime.Text)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
        
        WindUI:Notify({
            Title = "Base Timer UI Enabled",
            Content = "Your base timer is now displayed!",
            Duration = 3,
            Icon = "timer",
        })
    else
        if BaseTimerUI then
            BaseTimerUI:Destroy()
            BaseTimerUI = nil
        end
        WindUI:Notify({
            Title = "Base Timer UI Disabled",
            Content = "Timer UI removed!",
            Duration = 3,
            Icon = "timer-off",
        })
    end
end

-- ========================================
-- CREATING TABS
-- ========================================
local MainTab = Window:Tab({
    Title = "Main",
    Icon = "home",
})

local PlayerTab = Window:Tab({
    Title = "Player",
    Icon = "user",
})

local VisualTab = Window:Tab({
    Title = "Visual",
    Icon = "eye",
})

local ServerInfoTab = Window:Tab({
    Title = "Server Info",
    Icon = "server",
})

local CreditsTab = Window:Tab({
    Title = "Credits",
    Icon = "heart",
})

local SettingsTab = Window:Tab({
    Title = "Settings",
    Icon = "settings",
})

-- ========================================
-- MAIN TAB ELEMENTS
-- ========================================

local InstantStealToggle = MainTab:Toggle({
    Title = "Instant Steal",
    Desc = "Automatically teleport to delivery when stealing",
    Icon = "zap",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        States.InstantStealEnabled = state
        if state then
            setupInstantSteal()
            WindUI:Notify({
                Title = "Instant Steal Enabled",
                Content = "You will auto-teleport when stealing!",
                Duration = 3,
                Icon = "package",
            })
        else
            WindUI:Notify({
                Title = "Instant Steal Disabled",
                Content = "Manual delivery required!",
                Duration = 3,
                Icon = "package-x",
            })
        end
    end
})

local FastInteractionToggle = MainTab:Toggle({
    Title = "Fast Interaction",
    Desc = "Instant proximity prompts",
    Icon = "hand",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleFastInteraction(state)
    end
})

local DesyncButton = MainTab:Button({
    Title = "Toggle Desync UI",
    Desc = "Show/Hide the draggable desync button",
    Icon = "monitor",
    Callback = function()
        if not DesyncUI then
            DesyncUI = createDesyncUI()
            WindUI:Notify({
                Title = "Desync UI Created",
                Content = "Drag the button to move it!",
                Duration = 3,
                Icon = "layout",
            })
        else
            DesyncUI:Destroy()
            DesyncUI = nil
            States.DesyncEnabled = false
            setNetworkOwnership(false)
            WindUI:Notify({
                Title = "Desync UI Removed",
                Content = "UI has been hidden!",
                Duration = 3,
                Icon = "layout",
            })
        end
    end
})

local AutoLockToggle = MainTab:Toggle({
    Title = "Auto Lock Base",
    Desc = "Automatically lock your base when timer hits 0s",
    Icon = "lock",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleAutoLock(state)
    end
})

-- ========================================
-- PLAYER TAB ELEMENTS
-- ========================================

local NoClipToggle = PlayerTab:Toggle({
    Title = "No-Clip",
    Desc = "Walk through walls",
    Icon = "ghost",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleNoClip(state)
    end
})

local AntiRagdollToggle = PlayerTab:Toggle({
    Title = "Anti Ragdoll",
    Desc = "Prevents ragdoll effects",
    Icon = "shield",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        States.AntiRagdollEnabled = state
        local character = LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    if state then
                        part.Massless = true
                    else
                        part.Massless = false
                    end
                end
            end
        end
        WindUI:Notify({
            Title = state and "Anti Ragdoll Enabled" or "Anti Ragdoll Disabled",
            Content = state and "You won't ragdoll anymore!" or "Ragdoll physics restored!",
            Duration = 3,
            Icon = "shield",
        })
    end
})

local GodModeToggle = PlayerTab:Toggle({
    Title = "God Mode",
    Desc = "Become invincible",
    Icon = "shield-check",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleGodMode(state)
    end
})

local AntiVoidToggle = PlayerTab:Toggle({
    Title = "Anti Void",
    Desc = "Creates invisible platform below you",
    Icon = "layers",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleAntiVoid(state)
    end
})

local InfJumpToggle = PlayerTab:Toggle({
    Title = "Infinite Jump",
    Desc = "Jump infinitely in the air",
    Icon = "arrow-up",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleInfJump(state)
    end
})

local SpeedToggle = PlayerTab:Toggle({
    Title = "Speed Boost",
    Desc = "Increase your walk speed",
    Icon = "gauge",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleSpeed(state, States.SpeedValue)
    end
})

local SpeedSlider = PlayerTab:Slider({
    Title = "Speed Value",
    Step = 1,
    Value = {
        Min = 16,
        Max = 100,
        Default = 16,
    },
    Callback = function(value)
        States.SpeedValue = value
        if States.SpeedEnabled then
            WalkSpeedSpoof:SetWalkSpeed(value)
        end
    end
})

local BaseTimerUIToggle = PlayerTab:Toggle({
    Title = "Base Timer Display",
    Desc = "Shows your base remaining time on screen",
    Icon = "timer",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleBaseTimerUI(state)
    end
})

-- ========================================
-- VISUAL TAB ELEMENTS
-- ========================================

local PlayerESPToggle = VisualTab:Toggle({
    Title = "Player ESP",
    Desc = "Highlight all players",
    Icon = "users",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        togglePlayerESP(state)
    end
})

local BaseESPToggle = VisualTab:Toggle({
    Title = "Base ESP",
    Desc = "Highlight all plot signs",
    Icon = "home",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleBaseESP(state)
    end
})

local BaseTimerESPToggle = VisualTab:Toggle({
    Title = "Base Timer ESP",
    Desc = "Show timer on all bases (Color coded)",
    Icon = "clock",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        toggleBaseTimerESP(state)
    end
})

-- ========================================
-- SERVER INFO TAB ELEMENTS
-- ========================================

local ServerInfoParagraph = ServerInfoTab:Paragraph({
    Title = "Server Information",
    Desc = "Current server details and player count",
    Color = "Blue",
    Image = "",
    ImageSize = 30,
    Locked = false,
})

local PlaceIdInput = ServerInfoTab:Input({
    Title = "Place ID",
    Desc = "Current game place ID",
    Value = tostring(game.PlaceId),
    Type = "Input",
    Placeholder = "Place ID",
    Callback = function(input) end
})

local JobIdInput = ServerInfoTab:Input({
    Title = "Job ID",
    Desc = "Current server job ID",
    Value = game.JobId,
    Type = "Textarea",
    Placeholder = "Job ID",
    Callback = function(input) end
})

local PlayerCountParagraph = ServerInfoTab:Paragraph({
    Title = "Players in Server",
    Desc = tostring(#Players:GetPlayers()) .. " players currently online",
    Color = "Green",
})

-- Update player count dynamically
spawn(function()
    while wait(5) do
        PlayerCountParagraph:SetDesc(tostring(#Players:GetPlayers()) .. " players currently online")
    end
end)

local JoinServerInput = ServerInfoTab:Input({
    Title = "Join Server by Job ID",
    Desc = "Enter a job ID to join that server",
    Value = "",
    Type = "Textarea",
    Placeholder = "Paste Job ID here...",
    Callback = function(input)
        if input and input ~= "" then
            local TeleportService = game:GetService("TeleportService")
            TeleportService:TeleportToPlaceInstance(game.PlaceId, input, LocalPlayer)
        end
    end
})

local JoinButton = ServerInfoTab:Button({
    Title = "Join Server",
    Desc = "Click to join the server with the Job ID above",
    Icon = "log-in",
    Callback = function()
        local jobId = JoinServerInput
        if jobId and jobId ~= "" then
            local TeleportService = game:GetService("TeleportService")
            TeleportService:TeleportToPlaceInstance(game.PlaceId, jobId, LocalPlayer)
        else
            WindUI:Notify({
                Title = "Error",
                Content = "Please enter a valid Job ID!",
                Duration = 3,
                Icon = "alert-circle",
            })
        end
    end
})

-- ========================================
-- CREDITS TAB ELEMENTS
-- ========================================

local CreditsParagraph = CreditsTab:Paragraph({
    Title = "Scripts Hub X | Official",
    Desc = "Made by PickleTalk and Mhicel. Join our discord server to be always updated with the latest features and scripts!",
    Color = "Red",
    Thumbnail = "rbxassetid://74135635728836",
    ThumbnailSize = 140,
    Buttons = {
        {
            Icon = "users",
            Title = "Discord",
            Callback = function()
                setclipboard("https://discord.gg/bpsNUH5sVb")
                WindUI:Notify({
                    Title = "Discord Link Copied!",
                    Content = "Discord invite link copied to clipboard!",
                    Duration = 3,
                    Icon = "check",
                })
            end,
        }
    }
})

local DiscordButton = CreditsTab:Button({
    Title = "Copy Discord Link",
    Desc = "Click to copy our Discord server link",
    Icon = "copy",
    Callback = function()
        setclipboard("https://discord.gg/bpsNUH5sVb")
        WindUI:Notify({
            Title = "Link Copied!",
            Content = "Discord invite copied to clipboard!",
            Duration = 3,
            Icon = "check",
        })
    end
})

-- ========================================
-- SETTINGS TAB ELEMENTS
-- ========================================

local function saveConfiguration()
    myConfig:Save()
    WindUI:Notify({
        Title = "Configuration Saved",
        Content = "All settings have been saved successfully!",
        Duration = 3,
        Icon = "save",
    })
end

local function loadConfiguration()
    myConfig:Load()
    WindUI:Notify({
        Title = "Configuration Loaded",
        Content = "Settings loaded successfully!",
        Duration = 3,
        Icon = "folder-open",
    })
end

local function changeTheme(themeName)
    WindUI:SetTheme(themeName)
    States.CurrentTheme = themeName
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Theme set to " .. themeName,
        Duration = 3,
        Icon = "palette",
    })
end

local SaveConfigButton = SettingsTab:Button({
    Title = "Save Configuration",
    Desc = "Save all current settings to file",
    Icon = "save",
    Callback = function()
        saveConfiguration()
    end
})

local LoadConfigButton = SettingsTab:Button({
    Title = "Load Configuration",
    Desc = "Load your saved settings from file",
    Icon = "folder-open",
    Callback = function()
        loadConfiguration()
    end
})

local ThemeDropdown = SettingsTab:Dropdown({
    Title = "Theme Selector",
    Values = {
        {Title = "Anime Dark", Icon = "moon"},
        {Title = "Anime Light", Icon = "sun"},
        {Title = "Purple Dream", Icon = "sparkles"},
        {Title = "Ocean Blue", Icon = "waves"},
        {Title = "Forest Green", Icon = "tree-deciduous"},
        {Title = "Crimson Red", Icon = "flame"},
        {Title = "Sunset Orange", Icon = "sunset"},
        {Title = "Midnight Purple", Icon = "moon-star"},
        {Title = "Cyan Glow", Icon = "zap"},
        {Title = "Rose Pink", Icon = "heart"},
        {Title = "Golden Hour", Icon = "sun"},
        {Title = "Neon Green", Icon = "zap-off"},
        {Title = "Electric Blue", Icon = "sparkle"},
        {Title = "Custom", Icon = "palette"},
    },
    Value = "Anime Dark",
    Callback = function(option)
        changeTheme(option.Title)
    end
})

local ThemeColorPicker = SettingsTab:Colorpicker({
    Title = "Custom Theme Color",
    Desc = "Select a custom accent color for the UI",
    Default = Color3.fromRGB(255, 15, 123),
    Callback = function(color)
        WindUI:AddTheme({
            Name = "Custom",
            Accent = color,
            Dialog = Color3.fromHex("#161616"),
            Outline = color,
            Text = Color3.fromHex("#FFFFFF"),
            Placeholder = Color3.fromHex("#7a7a7a"),
            Background = Color3.fromHex("#101010"),
            Button = Color3.fromHex("#52525b"),
            Icon = color
        })
        
        WindUI:SetTheme("Custom")
        States.CurrentTheme = "Custom"
        WindUI:Notify({
            Title = "Custom Theme Applied",
            Content = "Your custom color has been set!",
            Duration = 3,
            Icon = "palette",
        })
    end
})

local UIToggleKeybind = SettingsTab:Keybind({
    Title = "UI Toggle Key",
    Desc = "Keybind to open/close the UI",
    Value = "RightShift",
    Callback = function(v)
        Window:SetToggleKey(Enum.KeyCode[v])
        WindUI:Notify({
            Title = "Keybind Changed",
            Content = "UI toggle key set to " .. v,
            Duration = 3,
            Icon = "keyboard",
        })
    end
})

-- Register all elements for config
myConfig:Register("InstantSteal", InstantStealToggle)
myConfig:Register("FastInteraction", FastInteractionToggle)
myConfig:Register("AutoLock", AutoLockToggle)
myConfig:Register("NoClip", NoClipToggle)
myConfig:Register("AntiRagdoll", AntiRagdollToggle)
myConfig:Register("GodMode", GodModeToggle)
myConfig:Register("AntiVoid", AntiVoidToggle)
myConfig:Register("InfJump", InfJumpToggle)
myConfig:Register("SpeedBoost", SpeedToggle)
myConfig:Register("SpeedValue", SpeedSlider)
myConfig:Register("BaseTimerUI", BaseTimerUIToggle)
myConfig:Register("PlayerESP", PlayerESPToggle)
myConfig:Register("BaseESP", BaseESPToggle)
myConfig:Register("BaseTimerESP", BaseTimerESPToggle)
myConfig:Register("Theme", ThemeDropdown)
myConfig:Register("ThemeColor", ThemeColorPicker)
myConfig:Register("UIToggleKey", UIToggleKeybind)

-- ========================================
-- CHARACTER RESPAWN HANDLER
-- ========================================
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    wait(1)
    
    -- Reapply No-Clip
    if States.NoClipEnabled then
        NoClipConnection = RunService.Stepped:Connect(function()
            setCharacterCollision(false)
        end)
        WindUI:Notify({
            Title = "No-Clip Re-applied",
            Content = "No-Clip was re-applied on respawn!",
            Duration = 3,
            Icon = "ghost",
        })
    end
    
    -- Reapply Desync
    if States.DesyncEnabled then
        setNetworkOwnership(true)
        WindUI:Notify({
            Title = "Desync Re-applied",
            Content = "Desync was re-applied on respawn!",
            Duration = 3,
            Icon = "shield",
        })
    end
    
    -- Reapply God Mode
    if States.GodModeEnabled then
        local humanoid = newCharacter:WaitForChild("Humanoid")
        humanoid.MaxHealth = math.huge
        humanoid.Health = math.huge
        WindUI:Notify({
            Title = "God Mode Re-applied",
            Content = "God Mode was re-applied on respawn!",
            Duration = 3,
            Icon = "shield-check",
        })
    end
    
    -- Reapply Speed
    if States.SpeedEnabled then
        wait(0.5)
        WalkSpeedSpoof:SetWalkSpeed(States.SpeedValue)
    end
    
    -- Update original jump power
    local humanoid = newCharacter:WaitForChild("Humanoid")
    originalJumpPower = humanoid.JumpPower
end)

-- ========================================
-- WELCOME POPUP
-- ========================================
WindUI:Popup({
    Title = "Steal A Clown Hub v1.0",
    Icon = "skull",
    Content = "New Script: Instant Steal, Auto Lock, Player ESP, Base ESP, Speed Boost, and more features!",
    Buttons = {
        {
            Title = "Close",
            Callback = function() end,
            Variant = "Tertiary",
        },
        {
            Title = "Join Discord",
            Icon = "users",
            Callback = function()
                setclipboard("https://discord.gg/bpsNUH5sVb")
                WindUI:Notify({
                    Title = "Link Copied!",
                    Content = "Discord invite copied to clipboard!",
                    Duration = 3,
                    Icon = "check",
                })
            end,
            Variant = "Primary",
        }
    }
})

-- ========================================
-- INITIALIZATION NOTIFICATION
-- ========================================
WindUI:Notify({
    Title = "Scripts Hub X Loaded!",
    Content = "Steal A Clown script loaded successfully! Join our Discord for updates!",
    Duration = 5,
    Icon = "check-circle",
})

-- Initialize player plot detection
States.PlayerPlotName = findPlayerPlot()